{"ast":null,"code":"import { connect } from \"react-redux\";\nimport store from '../../store';\nimport Button from \"../../components/button\";\nimport { moving } from \"../../utils\";\nimport { regainMana, begin, end, setGamerName, changeDisplayAnimation } from '../../action';\nconst playerDiv = document.getElementById(store.getState().gamerName);\nlet monsterDiv = document.getElementById(store.getState().monsterName);\nlet fireMonster = document.getElementById('fire-' + store.getState().monsterName);\nlet starPlayer = document.getElementById('star-' + store.getState().gamerName);\nlet starMonster = document.getElementById('star-' + store.getState().monsterName);\n\nconst mapStateToProps = state => ({\n  displayAnimation: state.displayAnimation,\n  monsterPv: state.monsterPv,\n  playerPv: state.playerPv\n});\n\nconst mapDispatchToProps = dispatch => ({\n  regainMana: () => {\n    setTimeout(() => {\n      dispatch(regainMana());\n    }, 1000 * 1.5);\n  },\n  begin: () => {\n    const result = prompt(\"choisisez un pseudo \");\n\n    if (result) {\n      var _result$match;\n\n      let regex = /[a-zA-Z0-9]/g;\n\n      if (((_result$match = result.match(regex)) === null || _result$match === void 0 ? void 0 : _result$match.length) === result.length) {\n        dispatch(setGamerName(result.trim()));\n        dispatch(begin());\n      } else if (result.match(regex).length < result.length) {\n        alert('le speudo ne peut pas contenir de caractére spéciaux');\n      }\n    } else alert('une erreur est survenue');\n  },\n  attack: () => {\n    let playerDiv = document.getElementById(store.getState().gamerName);\n    dispatch(changeDisplayAnimation());\n    moving(playerDiv, 'draw', 1000, 'player');\n  },\n  end: () => {\n    dispatch(end());\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Button);","map":{"version":3,"sources":["/home/romu/Desktop/work/monster_slayer3 (copy)/src/container/button/index.tsx"],"names":["connect","store","Button","moving","regainMana","begin","end","setGamerName","changeDisplayAnimation","playerDiv","document","getElementById","getState","gamerName","monsterDiv","monsterName","fireMonster","starPlayer","starMonster","mapStateToProps","state","displayAnimation","monsterPv","playerPv","mapDispatchToProps","dispatch","setTimeout","result","prompt","regex","match","length","trim","alert","attack"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAAgBC,MAAhB,QAA8B,aAA9B;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,GAA5B,EAAiCC,YAAjC,EAA6DC,sBAA7D,QAA0F,cAA1F;AAEA,MAAMC,SAA6B,GAAGC,QAAQ,CAACC,cAAT,CAAwBV,KAAK,CAACW,QAAN,GAAiBC,SAAzC,CAAtC;AACA,IAAIC,UAA8B,GAAGJ,QAAQ,CAACC,cAAT,CAAwBV,KAAK,CAACW,QAAN,GAAiBG,WAAzC,CAArC;AACA,IAAIC,WAA8B,GAAGN,QAAQ,CAACC,cAAT,CAAwB,UAAQV,KAAK,CAACW,QAAN,GAAiBG,WAAjD,CAArC;AACA,IAAIE,UAA8B,GAAGP,QAAQ,CAACC,cAAT,CAAwB,UAAQV,KAAK,CAACW,QAAN,GAAiBC,SAAjD,CAArC;AACA,IAAIK,WAA+B,GAAGR,QAAQ,CAACC,cAAT,CAAwB,UAAQV,KAAK,CAACW,QAAN,GAAiBG,WAAjD,CAAtC;;AACA,MAAMI,eAAe,GAAIC,KAAD,KAAkB;AACxCC,EAAAA,gBAAgB,EAAGD,KAAK,CAACC,gBADe;AAExCC,EAAAA,SAAS,EAAEF,KAAK,CAACE,SAFuB;AAGxCC,EAAAA,QAAQ,EAAEH,KAAK,CAACG;AAHwB,CAAlB,CAAxB;;AAKA,MAAMC,kBAAkB,GAAIC,QAAD,KAAoB;AAE7CrB,EAAAA,UAAU,EAAG,MAAM;AACjBsB,IAAAA,UAAU,CAAC,MAAK;AACdD,MAAAA,QAAQ,CAACrB,UAAU,EAAX,CAAR;AACD,KAFS,EAEP,OAAM,GAFC,CAAV;AAGD,GAN4C;AAQ7CC,EAAAA,KAAK,EAAE,MAAM;AACX,UAAMsB,MAAM,GAAGC,MAAM,CAAC,sBAAD,CAArB;;AACA,QAAID,MAAJ,EAAY;AAAA;;AACV,UAAIE,KAAK,GAAG,cAAZ;;AACA,UAAI,kBAAAF,MAAM,CAACG,KAAP,CAAaD,KAAb,iEAAqBE,MAArB,MAAgCJ,MAAM,CAACI,MAA3C,EAAkD;AAChDN,QAAAA,QAAQ,CAAClB,YAAY,CAACoB,MAAM,CAACK,IAAP,EAAD,CAAb,CAAR;AACAP,QAAAA,QAAQ,CAACpB,KAAK,EAAN,CAAR;AACD,OAHD,MAIK,IAAIsB,MAAM,CAACG,KAAP,CAAaD,KAAb,EAAqBE,MAArB,GAA8BJ,MAAM,CAACI,MAAzC,EAAiD;AACpDE,QAAAA,KAAK,CAAC,sDAAD,CAAL;AACD;AACF,KATD,MAUKA,KAAK,CAAC,yBAAD,CAAL;AACN,GArB4C;AAsB7CC,EAAAA,MAAM,EAAE,MAAM;AACZ,QAAIzB,SAA6B,GAAGC,QAAQ,CAACC,cAAT,CAAwBV,KAAK,CAACW,QAAN,GAAiBC,SAAzC,CAApC;AACAY,IAAAA,QAAQ,CAACjB,sBAAsB,EAAvB,CAAR;AACAL,IAAAA,MAAM,CAACM,SAAD,EAAa,MAAb,EAAqB,IAArB,EAA2B,QAA3B,CAAN;AACD,GA1B4C;AA2B7CH,EAAAA,GAAG,EAAE,MAAM;AACPmB,IAAAA,QAAQ,CAACnB,GAAG,EAAJ,CAAR;AACH;AA7B4C,CAApB,CAA3B;;AA+BA,eAAeN,OAAO,CAACmB,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CtB,MAA7C,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport store from '../../store'\nimport Button from \"../../components/button\";\nimport { round, moving } from \"../../utils\";\nimport { regainMana, begin, end, setGamerName, attack, heal, changeDisplayAnimation} from '../../action'\n\nconst playerDiv: HTMLElement | null = document.getElementById(store.getState().gamerName)\nlet monsterDiv: HTMLElement | null = document.getElementById(store.getState().monsterName)\nlet fireMonster:HTMLElement | null = document.getElementById('fire-'+store.getState().monsterName)\nlet starPlayer: HTMLElement | null = document.getElementById('star-'+store.getState().gamerName)\nlet starMonster: HTMLElement | null = document.getElementById('star-'+store.getState().monsterName)\nconst mapStateToProps = (state : any) => ({\n  displayAnimation : state.displayAnimation,\n  monsterPv: state.monsterPv,\n  playerPv: state.playerPv,\n})\nconst mapDispatchToProps = (dispatch: any) => ({ \n  \n  regainMana : () => {\n    setTimeout(()=> {\n      dispatch(regainMana())\n    }, 1000 *1.5)\n  },\n  \n  begin: () => {\n    const result = prompt(\"choisisez un pseudo \")\n    if (result) {\n      let regex = /[a-zA-Z0-9]/g \n      if (result.match(regex)?.length === result.length){\n        dispatch(setGamerName(result.trim()))\n        dispatch(begin())\n      }\n      else if (result.match(regex)!.length < result.length) {\n        alert('le speudo ne peut pas contenir de caractére spéciaux')\n      }\n    }\n    else alert('une erreur est survenue')\n  },\n  attack: () => {\n    let playerDiv: HTMLElement | null = document.getElementById(store.getState().gamerName)\n    dispatch(changeDisplayAnimation())\n    moving(playerDiv!, 'draw', 1000, 'player')\n  },\n  end: () => {\n      dispatch(end())\n  }\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(Button)"]},"metadata":{},"sourceType":"module"}