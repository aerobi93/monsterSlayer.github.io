{"ast":null,"code":"import { connect } from \"react-redux\";\nimport Button from \"../../componants/buttons\";\nimport { begin, end, heal, attack, changeDiplayAnimation } from '../../action';\nimport { moving, round } from '../../utils';\nimport store from '../../store';\n\nconst mapStateToProps = state => ({\n  displayAnimation: state.displayAnimation\n});\n\nconst mapStateToDispatch = dispatch => ({\n  buttonAction: value => {\n    let playerPicture = document.getElementById('player');\n    let monsterPicture = document.getElementById('monster');\n\n    if (value == 'begin') {\n      dispatch(begin());\n    } else if (value == 'begin') {\n      dispatch(end());\n    } else if (value == 'heal') {\n      dispatch(heal());\n      moving(monsterPicture, 1000 * 0.75, 'monsterAttack', playerPicture);\n      setTimeout(() => {\n        dispatch(attack(round(3, 10), 'playerPv', 'messageDommagePlayer'));\n      }, 1000 * 0.75);\n    } else if (value == 'attack' || value == 'specialAttack') {\n      let dommage = value == 'attack' ? round(3, 10) : round(10, 15);\n      dispatch(changeDiplayAnimation());\n      moving(playerPicture, 1000 * 0.75, 'playerAttack', monsterPicture);\n      setTimeout(() => {\n        moving(monsterPicture, 1000 * 0.75, 'monsterAttack', playerPicture);\n        dispatch(attack(dommage, 'monsterPv', 'messageDommageMonster'));\n      }, 1000 * 0.75);\n\n      if (+store.getState().monsterPv - dommage > 0) {\n        setTimeout(() => {\n          dispatch(changeDiplayAnimation());\n          dispatch(attack(round(3, 10), 'playerPv', 'messageDommagePlayer'));\n        }, 1000 * 1.5);\n      }\n    }\n  }\n});\n\nexport default connect(mapStateToProps, mapStateToDispatch)(Button);","map":{"version":3,"sources":["/home/rom/Desktop/reactBulder/my-app/src/container/button/index.tsx"],"names":["connect","Button","begin","end","heal","attack","changeDiplayAnimation","moving","round","store","mapStateToProps","state","displayAnimation","mapStateToDispatch","dispatch","buttonAction","value","playerPicture","document","getElementById","monsterPicture","setTimeout","dommage","getState","monsterPv"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAsBC,IAAtB,EAA4BC,MAA5B,EAAoCC,qBAApC,QAAiE,cAAjE;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,aAA9B;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AAEA,MAAMC,eAAe,GAAEC,KAAD,KAAgB;AACtCC,EAAAA,gBAAgB,EAAED,KAAK,CAACC;AADc,CAAhB,CAAtB;;AAGA,MAAMC,kBAAkB,GAAIC,QAAD,KAAmB;AAC9CC,EAAAA,YAAY,EAAGC,KAAD,IAAe;AAC3B,QAAIC,aAAgC,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAvC;AACA,QAAIC,cAAiC,GAAGF,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAxC;;AACE,QAAIH,KAAK,IAAI,OAAb,EAAuB;AACnBF,MAAAA,QAAQ,CAACZ,KAAK,EAAN,CAAR;AACH,KAFD,MAGK,IAAIc,KAAK,IAAI,OAAb,EAAuB;AAC1BF,MAAAA,QAAQ,CAACX,GAAG,EAAJ,CAAR;AACH,KAFM,MAGA,IAAIa,KAAK,IAAI,MAAb,EAAoB;AACrBF,MAAAA,QAAQ,CAACV,IAAI,EAAL,CAAR;AACAG,MAAAA,MAAM,CAACa,cAAD,EAAkB,OAAO,IAAzB,EAA+B,eAA/B,EAAgDH,aAAhD,CAAN;AACAI,MAAAA,UAAU,CAAC,MAAK;AACdP,QAAAA,QAAQ,CAACT,MAAM,CAACG,KAAK,CAAC,CAAD,EAAI,EAAJ,CAAN,EAAe,UAAf,EAA2B,sBAA3B,CAAP,CAAR;AACD,OAFS,EAEP,OAAO,IAFA,CAAV;AAIH,KAPI,MAQA,IAAIQ,KAAK,IAAI,QAAT,IAAqBA,KAAK,IAAI,eAAlC,EAAmD;AACpD,UAAIM,OAAO,GAAGN,KAAK,IAAG,QAAR,GAAmBR,KAAK,CAAC,CAAD,EAAG,EAAH,CAAxB,GAAiCA,KAAK,CAAC,EAAD,EAAK,EAAL,CAApD;AACAM,MAAAA,QAAQ,CAACR,qBAAqB,EAAtB,CAAR;AACAC,MAAAA,MAAM,CAACU,aAAD,EAAiB,OAAO,IAAxB,EAA8B,cAA9B,EAA8CG,cAA9C,CAAN;AACAC,MAAAA,UAAU,CAAC,MAAM;AACfd,QAAAA,MAAM,CAACa,cAAD,EAAkB,OAAO,IAAzB,EAA+B,eAA/B,EAAgDH,aAAhD,CAAN;AACAH,QAAAA,QAAQ,CAACT,MAAM,CAACiB,OAAD,EAAU,WAAV,EAAuB,uBAAvB,CAAP,CAAR;AACD,OAHS,EAGP,OAAO,IAHA,CAAV;;AAIA,UAAI,CAACb,KAAK,CAACc,QAAN,GAAiBC,SAAlB,GAA8BF,OAA9B,GAAwC,CAA5C,EAAgD;AAChDD,QAAAA,UAAU,CAAC,MAAM;AACbP,UAAAA,QAAQ,CAACR,qBAAqB,EAAtB,CAAR;AACAQ,UAAAA,QAAQ,CAACT,MAAM,CAACG,KAAK,CAAC,CAAD,EAAI,EAAJ,CAAN,EAAe,UAAf,EAA2B,sBAA3B,CAAP,CAAR;AACH,SAHS,EAGP,OAAO,GAHA,CAAV;AAIC;AACJ;AACJ;AAjC6C,CAAnB,CAA3B;;AAmCA,eAAeR,OAAO,CAACU,eAAD,EAAkBG,kBAAlB,CAAP,CAA8CZ,MAA9C,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport Button from \"../../componants/buttons\";\nimport { begin, end,  heal, attack, changeDiplayAnimation } from '../../action';\nimport { moving, round } from '../../utils'\nimport store from '../../store'\n\nconst mapStateToProps=(state:any) => ({\ndisplayAnimation: state.displayAnimation\n})\nconst mapStateToDispatch = (dispatch:any) => ({\nbuttonAction: (value:any) => {\n  let playerPicture:HTMLElement | null = document.getElementById('player')\n  let monsterPicture:HTMLElement | null = document.getElementById('monster')\n    if (value == 'begin' ) {\n        dispatch(begin())\n    }\n    else if (value == 'begin' ) {\n      dispatch(end())\n  }\n    else if (value == 'heal'){\n        dispatch(heal())\n        moving(monsterPicture!, 1000 * 0.75, 'monsterAttack', playerPicture!)\n        setTimeout(()=> {\n          dispatch(attack(round(3, 10), 'playerPv', 'messageDommagePlayer'))\n        }, 1000 * 0.75)\n        \n    }\n    else if (value == 'attack' || value == 'specialAttack') {\n        let dommage = value== 'attack' ? round(3,10) : round(10, 15)\n        dispatch(changeDiplayAnimation())\n        moving(playerPicture!, 1000 * 0.75, 'playerAttack', monsterPicture!) \n        setTimeout(() => {\n          moving(monsterPicture!, 1000 * 0.75, 'monsterAttack', playerPicture!)\n          dispatch(attack(dommage, 'monsterPv', 'messageDommageMonster'))\n        }, 1000 * 0.75);\n        if (+store.getState().monsterPv - dommage > 0 ) {\n        setTimeout(() => {\n            dispatch(changeDiplayAnimation())\n            dispatch(attack(round(3, 10), 'playerPv', 'messageDommagePlayer'))\n        }, 1000 * 1.5);\n        }\n    }   \n}})\n\nexport default connect(mapStateToProps, mapStateToDispatch) (Button)"]},"metadata":{},"sourceType":"module"}