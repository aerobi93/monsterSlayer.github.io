{"ast":null,"code":"import { connect } from \"react-redux\";\nimport Button from \"../../components/button\";\nimport { end } from '../../action';\n\nconst mapStateToProps = state => ({\n  displayAnamimation: state.displayAnimation\n});\n\nconst mapDispatchToProps = displatch => ({\n  begin: () => {\n    const gamer = prompt(\"choisisez un pseudo \");\n    let regex = /a-zA-z0-9/g;\n\n    if (gamer) {\n      console.log(gamer.match(regex));\n\n      if (gamer.trim()) {}\n    }\n  },\n  end: () => {\n    displatch(end());\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Button);","map":{"version":3,"sources":["/home/rom/Desktop/reactBulder/monster_slayer3_react/src/container/button/index.tsx"],"names":["connect","Button","end","mapStateToProps","state","displayAnamimation","displayAnimation","mapDispatchToProps","displatch","begin","gamer","prompt","regex","console","log","match","trim"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,SAAgBC,GAAhB,QAAyC,cAAzC;;AAEA,MAAMC,eAAe,GAAIC,KAAD,KAAkB;AACxCC,EAAAA,kBAAkB,EAAGD,KAAK,CAACE;AADa,CAAlB,CAAxB;;AAGA,MAAMC,kBAAkB,GAAIC,SAAD,KAAqB;AAC9CC,EAAAA,KAAK,EAAE,MAAM;AACX,UAAMC,KAAK,GAAGC,MAAM,CAAC,sBAAD,CAApB;AACE,QAAIC,KAAK,GAAG,YAAZ;;AACA,QAAIF,KAAJ,EAAU;AACRG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,KAAN,CAAYH,KAAZ,CAAZ;;AACA,UAAIF,KAAK,CAACM,IAAN,EAAJ,EAAiB,CAEhB;AACF;AACJ,GAV6C;AAW9Cd,EAAAA,GAAG,EAAE,MAAM;AACPM,IAAAA,SAAS,CAACN,GAAG,EAAJ,CAAT;AACH;AAb6C,CAArB,CAA3B;;AAgBA,eAAeF,OAAO,CAACG,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CN,MAA7C,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport Button from \"../../components/button\";\n\nimport { begin, end, setGamerName } from '../../action'\n\nconst mapStateToProps = (state : any) => ({\n  displayAnamimation : state.displayAnimation\n})\nconst mapDispatchToProps = (displatch: any) => ({\n  begin: () => {\n    const gamer = prompt(\"choisisez un pseudo \")\n      let regex = /a-zA-z0-9/g\n      if (gamer){\n        console.log(gamer.match(regex))\n        if (gamer.trim()){\n          \n        }\n      }\n  },\n  end: () => {\n      displatch(end())\n  }\n\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(Button)"]},"metadata":{},"sourceType":"module"}