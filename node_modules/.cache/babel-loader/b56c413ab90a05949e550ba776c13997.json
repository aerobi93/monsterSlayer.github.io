{"ast":null,"code":"import { connect } from \"react-redux\";\nimport Button from \"../../componants/buttons\";\nimport { begin, heal, attack, changeDiplayAnimation } from '../../action';\nimport { moving, round } from '../../utils';\n\nconst mapStateToProps = state => ({\n  displayAnimation: state.displayAnimation\n});\n\nconst mapStateToDispatch = dispatch => ({\n  buttonAction: value => {\n    if (value == 'begin' || value == 'giveUp') {\n      let display = value == 'begin' ? true : false;\n      dispatch(begin(display));\n    } else if (value == 'heal') {\n      dispatch(heal());\n      setTimeout(() => {\n        dispatch(attack(round(3, 10), 'playerPv', 'messageDommagePlayer'));\n      }, 100);\n    } else if (value == 'attack' || value == 'specialAttack') {\n      let playerPicture = document.getElementById('player');\n      let monsterPicture = document.getElementById('monster');\n      let dommage = value == 'attack' ? round(3, 10) : round(10, 15);\n      dispatch(changeDiplayAnimation());\n      moving(playerPicture, 1000 * 1.5, 'playerAttack', monsterPicture);\n      setTimeout(() => {\n        moving(monsterPicture, 1000 * 1.5, 'monsterAttack', playerPicture);\n        dispatch(attack(round(3, 10), 'monsterPv', 'messageDommageMonster'));\n      }, 1000 * 1.5);\n      setTimeout(() => {\n        dispatch(changeDiplayAnimation());\n        dispatch(attack(round(3, 10), 'playerPv', 'messageDommagePlayer'));\n      }, 1000 * 3);\n    }\n  }\n});\n\nexport default connect(mapStateToProps, mapStateToDispatch)(Button);","map":{"version":3,"sources":["/home/rom/Desktop/reactBulder/my-app/src/container/button/index.tsx"],"names":["connect","Button","begin","heal","attack","changeDiplayAnimation","moving","round","mapStateToProps","state","displayAnimation","mapStateToDispatch","dispatch","buttonAction","value","display","setTimeout","playerPicture","document","getElementById","monsterPicture","dommage"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,MAAtB,EAA8BC,qBAA9B,QAA2D,cAA3D;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,aAA9B;;AAEA,MAAMC,eAAe,GAAEC,KAAD,KAAgB;AACpCC,EAAAA,gBAAgB,EAAED,KAAK,CAACC;AADY,CAAhB,CAAtB;;AAGA,MAAMC,kBAAkB,GAAIC,QAAD,KAAmB;AAC5CC,EAAAA,YAAY,EAAGC,KAAD,IAAe;AACzB,QAAIA,KAAK,IAAI,OAAT,IAAoBA,KAAK,IAAG,QAAhC,EAA2C;AACvC,UAAIC,OAAO,GAAID,KAAK,IAAI,OAAT,GAAmB,IAAnB,GAA0B,KAAzC;AACAF,MAAAA,QAAQ,CAACV,KAAK,CAACa,OAAD,CAAN,CAAR;AACH,KAHD,MAIK,IAAID,KAAK,IAAI,MAAb,EAAoB;AACrBF,MAAAA,QAAQ,CAACT,IAAI,EAAL,CAAR;AACAa,MAAAA,UAAU,CAAC,MAAK;AACdJ,QAAAA,QAAQ,CAACR,MAAM,CAACG,KAAK,CAAC,CAAD,EAAI,EAAJ,CAAN,EAAe,UAAf,EAA2B,sBAA3B,CAAP,CAAR;AACD,OAFS,EAEP,GAFO,CAAV;AAIH,KANI,MAOA,IAAIO,KAAK,IAAI,QAAT,IAAqBA,KAAK,IAAI,eAAlC,EAAmD;AACpD,UAAIG,aAAgC,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAvC;AACA,UAAIC,cAAiC,GAAGF,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAxC;AACA,UAAIE,OAAO,GAAGP,KAAK,IAAG,QAAR,GAAkBP,KAAK,CAAC,CAAD,EAAG,EAAH,CAAvB,GAAgCA,KAAK,CAAC,EAAD,EAAK,EAAL,CAAnD;AACAK,MAAAA,QAAQ,CAACP,qBAAqB,EAAtB,CAAR;AACAC,MAAAA,MAAM,CAACW,aAAD,EAAiB,OAAO,GAAxB,EAA6B,cAA7B,EAA6CG,cAA7C,CAAN;AACAJ,MAAAA,UAAU,CAAC,MAAM;AACfV,QAAAA,MAAM,CAACc,cAAD,EAAkB,OAAO,GAAzB,EAA8B,eAA9B,EAA+CH,aAA/C,CAAN;AACAL,QAAAA,QAAQ,CAACR,MAAM,CAACG,KAAK,CAAC,CAAD,EAAI,EAAJ,CAAN,EAAe,WAAf,EAA4B,uBAA5B,CAAP,CAAR;AACD,OAHS,EAGP,OAAM,GAHC,CAAV;AAIAS,MAAAA,UAAU,CAAC,MAAM;AACbJ,QAAAA,QAAQ,CAACP,qBAAqB,EAAtB,CAAR;AACAO,QAAAA,QAAQ,CAACR,MAAM,CAACG,KAAK,CAAC,CAAD,EAAI,EAAJ,CAAN,EAAe,UAAf,EAA2B,sBAA3B,CAAP,CAAR;AACH,OAHS,EAGP,OAAO,CAHA,CAAV;AAIH;AACJ;AA5B2C,CAAnB,CAA3B;;AA8BA,eAAeP,OAAO,CAACQ,eAAD,EAAkBG,kBAAlB,CAAP,CAA8CV,MAA9C,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport Button from \"../../componants/buttons\";\nimport { begin, heal, attack, changeDiplayAnimation } from '../../action';\nimport { moving, round } from '../../utils'\n\nconst mapStateToProps=(state:any) => ({\n  displayAnimation: state.displayAnimation\n})\nconst mapStateToDispatch = (dispatch:any) => ({\n  buttonAction: (value:any) => {\n      if (value == 'begin' || value== 'giveUp' ) {\n          let display =  value == 'begin' ? true : false\n          dispatch(begin(display))\n      }\n      else if (value == 'heal'){\n          dispatch(heal())\n          setTimeout(()=> {\n            dispatch(attack(round(3, 10), 'playerPv', 'messageDommagePlayer'))\n          }, 100)\n         \n      }\n      else if (value == 'attack' || value == 'specialAttack') {\n          let playerPicture:HTMLElement | null = document.getElementById('player')\n          let monsterPicture:HTMLElement | null = document.getElementById('monster')\n          let dommage = value== 'attack'? round(3,10) : round(10, 15)\n          dispatch(changeDiplayAnimation())\n          moving(playerPicture!, 1000 * 1.5, 'playerAttack', monsterPicture!) \n          setTimeout(() => {\n            moving(monsterPicture!, 1000 * 1.5, 'monsterAttack', playerPicture!)\n            dispatch(attack(round(3, 10), 'monsterPv', 'messageDommageMonster'))\n          }, 1000 *1.5);\n          setTimeout(() => {\n              dispatch(changeDiplayAnimation())\n              dispatch(attack(round(3, 10), 'playerPv', 'messageDommagePlayer'))\n          }, 1000 * 3);\n      }   \n  }})\n\nexport default connect(mapStateToProps, mapStateToDispatch) (Button)"]},"metadata":{},"sourceType":"module"}