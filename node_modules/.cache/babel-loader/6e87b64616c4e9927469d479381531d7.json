{"ast":null,"code":"import { SET_GAMER_NAME, BEGIN, END, HEAL, ATTACK, CHANGE_LEVEL, REGAIN_MANA, CHANGE_DISPLAY_ANIMATION, REPORT_BATTLE, FIRE_BALL, LOST_MANA, FIRE_CONE } from '../action';\nimport { monsterArray, round } from '../utils';\nconst initialState = {\n  level: 0,\n  beeingPlaying: false,\n  displayAnimation: false,\n  dommage: '',\n  //monster\n  currentMonster: monsterArray[0],\n  monsterName: '',\n  monsterPv: '',\n  monsterMana: '',\n  messageMonster: '',\n  //player\n  gamerName: '',\n  playerPvMax: 100,\n  playerPv: '',\n  playerManaMax: 100,\n  playerMana: '',\n  lvUpPlayer: 100,\n  messagePlayer: ''\n};\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    case SET_GAMER_NAME:\n      return { ...state,\n        gamerName: action.value\n      };\n\n    case BEGIN:\n      return { ...state,\n        beeingPlaying: true,\n        displayAnimation: false,\n        playerPv: state.playerPvMax,\n        playerMana: state.playerManaMax,\n        monsterName: state.currentMonster.name,\n        monsterPv: state.currentMonster.pvMax,\n        monsterMana: state.currentMonster.manaMax\n      };\n\n    case CHANGE_DISPLAY_ANIMATION:\n      return { ...state,\n        displayAnimation: !state.displayAnimation\n      };\n\n    case REGAIN_MANA:\n      return { ...state,\n        monsterMana: state.monsterMana + 5 < state.monsterManaMax ? state.monsterMana + 5 : '',\n        playerMana: state.playerMana + 5 < state.playerManaMax ? state.playerMana + 5 : state.playerManaMax\n      };\n\n    case HEAL:\n      {\n        if (action.value == 'player') {\n          return { ...state,\n            playerMana: state.playerMana - 10,\n            playerPv: state.playerPv + Math.floor(15 * state.lvUpPlayer / 100) >= state.playerPvMax ? state.playerPvMax : state.playerPv + Math.floor(15 * state.lvUpPlayer / 100),\n            messagePlayer: state.playerPv + Math.floor(15 * state.lvUpPlayer / 100) >= state.playerPvMax ? 'vous avez recuperez' + (state.playerPvMax - state.playerPv) + 'pv' : 'vous avez recuperez' + Math.floor(15 * state.lvUpPlayer / 100) + 'pv'\n          };\n        }\n\n        if (action.value == 'monster') {\n          return { ...state,\n            monsterMana: state.monsterMana - 10,\n            monsterPv: state.monsterPv + state.actualMonster.heal >= state.monsterPvMax ? state.monsterPvMax : state.monsterPv + state.actualMonster.heal,\n            messageMonster: state.monsterPv + state.actualMonster.heal >= state.monsterPvMax ? 'le monstre  a recuperer' + (state.monsterPvMax - state.monsterPv) + 'pv' : 'le monstre  a recuperer' + state.actualMonster.heal + 'pv'\n          };\n        }\n      }\n\n    case REPORT_BATTLE:\n      return { ...state,\n        [action.forWho]: action.forWho == 'monster' ? state.gamerName + ' a infliger ' + state.dommage + ' de degat' : state.monsterName + ' vous a infliger ' + state.dommage + ' de degat'\n      };\n\n    case ATTACK:\n      {\n        if (action.attacker == \"player\") {\n          let dommageInflige = Math.floor(round(3, 5) * state.lvUpPlayer / 100);\n          return { ...state,\n            dommage: dommageInflige,\n            monsterPv: state.monsterPv - dommageInflige > 0 ? state.monsterPv - dommageInflige : 0\n          };\n        }\n\n        if (action.attacker == \"monster\") {\n          let dommageInflige = round(state.currentMonster.dommage_min, state.currentMonster.dommage_max);\n          return { ...state,\n            dommage: dommageInflige,\n            playerPv: state.playerPv - dommageInflige > 0 ? state.playerPv - dommageInflige : 0\n          };\n        }\n      }\n\n    case LOST_MANA:\n      return { ...state,\n        [action.value]: +[state[action.value]] - action.number\n      };\n\n    case FIRE_CONE:\n      return { ...state,\n        monsterPV: state.monnsterPV - state.lvUpPlayer / 100\n      };\n\n    case FIRE_BALL:\n      {\n        if (action.attacker == \"player\") {\n          let dommageInflige = Math.floor(round(10, 15) * state.lvUpPlayer / 100);\n          return { ...state,\n            dommage: dommageInflige,\n            monsterPv: state.monsterPv - dommageInflige > 0 ? state.monsterPv - dommageInflige : 0\n          };\n        }\n\n        if (action.attacker == \"monster\") {\n          let dommageInflige = round(state.currentMonster.special_min, state.currentMonster.special_max);\n          return { ...state,\n            dommage: dommageInflige,\n            playerPv: state.playerPv - dommageInflige > 0 ? state.playerPv - dommageInflige : 0\n          };\n        }\n      }\n\n    case CHANGE_LEVEL:\n      return { ...state,\n        level: state.level + 1,\n        lvUpPlayer: state.lvUpPlayer + 20,\n        playerPvMax: state.playerPvMax + 20,\n        playerManaMax: state.playerPvMax + 20,\n        monsterPv: monsterArray[state.level + 1].pvMax,\n        monsterPvMax: monsterArray[state.level + 1].pvMax,\n        monsterMana: monsterArray[state.level + 1].manaMax,\n        monsterManaMax: monsterArray[state.level + 1].manaMax,\n        monsterName: monsterArray[state.level + 1].name,\n        messagePlayer: '',\n        messageMonster: '',\n        displayAnimation: false\n      };\n\n    case END:\n      return { ...state,\n        level: 0,\n        gamerName: '',\n        monsterName: monsterArray[0],\n        beeingPlaying: false,\n        displayAnimation: false,\n        monsterPvMax: '',\n        monsterPv: 100,\n        playerPvMax: 100,\n        playerPv: 100,\n        monsterManaMax: 100,\n        monsterMana: 100,\n        playerManaMax: 100,\n        playerMana: 100\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/romu/Desktop/work/monster_slayer3 (copy)/src/reducers/index.tsx"],"names":["SET_GAMER_NAME","BEGIN","END","HEAL","ATTACK","CHANGE_LEVEL","REGAIN_MANA","CHANGE_DISPLAY_ANIMATION","REPORT_BATTLE","FIRE_BALL","LOST_MANA","FIRE_CONE","monsterArray","round","initialState","level","beeingPlaying","displayAnimation","dommage","currentMonster","monsterName","monsterPv","monsterMana","messageMonster","gamerName","playerPvMax","playerPv","playerManaMax","playerMana","lvUpPlayer","messagePlayer","reducer","state","action","type","value","name","pvMax","manaMax","monsterManaMax","Math","floor","actualMonster","heal","monsterPvMax","forWho","attacker","dommageInflige","dommage_min","dommage_max","number","monsterPV","monnsterPV","special_min","special_max"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,KAAzB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,MAA3C,EAAmDC,YAAnD,EAAiEC,WAAjE,EAA8EC,wBAA9E,EAAwGC,aAAxG,EAAuHC,SAAvH,EAAkIC,SAAlI,EAA6IC,SAA7I,QAA8J,WAA9J;AACA,SAASC,YAAT,EAAuBC,KAAvB,QAAoC,UAApC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAG,CADW;AAEnBC,EAAAA,aAAa,EAAG,KAFG;AAGnBC,EAAAA,gBAAgB,EAAC,KAHE;AAInBC,EAAAA,OAAO,EAAC,EAJW;AAKnB;AACAC,EAAAA,cAAc,EAAGP,YAAY,CAAC,CAAD,CANV;AAOnBQ,EAAAA,WAAW,EAAG,EAPK;AAQnBC,EAAAA,SAAS,EAAE,EARQ;AASnBC,EAAAA,WAAW,EAAC,EATO;AAUnBC,EAAAA,cAAc,EAAE,EAVG;AAWnB;AACAC,EAAAA,SAAS,EAAC,EAZS;AAanBC,EAAAA,WAAW,EAAE,GAbM;AAcnBC,EAAAA,QAAQ,EAAE,EAdS;AAenBC,EAAAA,aAAa,EAAE,GAfI;AAgBnBC,EAAAA,UAAU,EAAE,EAhBO;AAiBnBC,EAAAA,UAAU,EAAE,GAjBO;AAkBnBC,EAAAA,aAAa,EAAE;AAlBI,CAArB;;AAoBA,MAAMC,OAAO,GAAG,YAAgD;AAAA,MAA/CC,KAA+C,uEAAnClB,YAAmC;AAAA,MAArBmB,MAAqB,uEAAR,EAAQ;;AAC9D,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKlC,cAAL;AACE,aAAO,EACL,GAAGgC,KADE;AAELR,QAAAA,SAAS,EAAGS,MAAM,CAACE;AAFd,OAAP;;AAIF,SAAKlC,KAAL;AACC,aAAO,EACL,GAAG+B,KADE;AAELhB,QAAAA,aAAa,EAAE,IAFV;AAGLC,QAAAA,gBAAgB,EAAC,KAHZ;AAILS,QAAAA,QAAQ,EAAEM,KAAK,CAACP,WAJX;AAKLG,QAAAA,UAAU,EAAEI,KAAK,CAACL,aALb;AAMLP,QAAAA,WAAW,EAAEY,KAAK,CAACb,cAAN,CAAqBiB,IAN7B;AAOLf,QAAAA,SAAS,EAAGW,KAAK,CAACb,cAAN,CAAqBkB,KAP5B;AAQLf,QAAAA,WAAW,EAAEU,KAAK,CAACb,cAAN,CAAqBmB;AAR7B,OAAP;;AAUA,SAAK/B,wBAAL;AACC,aAAO,EACL,GAAGyB,KADE;AAELf,QAAAA,gBAAgB,EAAG,CAACe,KAAK,CAACf;AAFrB,OAAP;;AAID,SAAKX,WAAL;AACC,aAAO,EACL,GAAG0B,KADE;AAELV,QAAAA,WAAW,EAAEU,KAAK,CAACV,WAAN,GAAoB,CAApB,GAAwBU,KAAK,CAACO,cAA9B,GAA+CP,KAAK,CAACV,WAAN,GAAoB,CAAnE,GAAuE,EAF/E;AAGLM,QAAAA,UAAU,EAAEI,KAAK,CAACJ,UAAN,GAAmB,CAAnB,GAAuBI,KAAK,CAACL,aAA7B,GAA8CK,KAAK,CAACJ,UAAN,GAAmB,CAAjE,GAAqEI,KAAK,CAACL;AAHlF,OAAP;;AAKF,SAAKxB,IAAL;AAAW;AACR,YAAI8B,MAAM,CAACE,KAAP,IAAgB,QAApB,EAA8B;AAC9B,iBAAO,EACN,GAAGH,KADG;AAEJJ,YAAAA,UAAU,EAAGI,KAAK,CAACJ,UAAN,GAAmB,EAF5B;AAGJF,YAAAA,QAAQ,EAAEM,KAAK,CAACN,QAAN,GAAiBc,IAAI,CAACC,KAAL,CAAW,KAAOT,KAAK,CAACH,UAAb,GAA0B,GAArC,CAAjB,IAA8DG,KAAK,CAACP,WAApE,GACVO,KAAK,CAACP,WADI,GAEVO,KAAK,CAACN,QAAN,GAAiBc,IAAI,CAACC,KAAL,CAAW,KAAOT,KAAK,CAACH,UAAb,GAA0B,GAArC,CALb;AAMJC,YAAAA,aAAa,EAAEE,KAAK,CAACN,QAAN,GAAiBc,IAAI,CAACC,KAAL,CAAW,KAAOT,KAAK,CAACH,UAAb,GAA0B,GAArC,CAAjB,IAA8DG,KAAK,CAACP,WAApE,GACf,yBAAyBO,KAAK,CAACP,WAAN,GAAqBO,KAAK,CAACN,QAApD,IAAgE,IADjD,GAEf,wBAAwBc,IAAI,CAACC,KAAL,CAAW,KAAOT,KAAK,CAACH,UAAb,GAA0B,GAArC,CAAxB,GAAoE;AARhE,WAAP;AAUD;;AACE,YAAII,MAAM,CAACE,KAAP,IAAgB,SAApB,EAA+B;AAC7B,iBAAO,EACL,GAAGH,KADE;AAELV,YAAAA,WAAW,EAAGU,KAAK,CAACV,WAAN,GAAoB,EAF7B;AAGLD,YAAAA,SAAS,EAAEW,KAAK,CAACX,SAAN,GAAkBW,KAAK,CAACU,aAAN,CAAoBC,IAAtC,IAA8CX,KAAK,CAACY,YAApD,GACXZ,KAAK,CAACY,YADK,GAEXZ,KAAK,CAACX,SAAN,GAAkBW,KAAK,CAACU,aAAN,CAAoBC,IALjC;AAMLpB,YAAAA,cAAc,EAAES,KAAK,CAACX,SAAN,GAAkBW,KAAK,CAACU,aAAN,CAAoBC,IAAtC,IAA8CX,KAAK,CAACY,YAApD,GAChB,6BAA6BZ,KAAK,CAACY,YAAN,GAAsBZ,KAAK,CAACX,SAAzD,IAAsE,IADtD,GAEhB,4BAA4BW,KAAK,CAACU,aAAN,CAAoBC,IAAhD,GAAuD;AARlD,WAAP;AAUD;AACF;;AACD,SAAMnC,aAAN;AACE,aAAO,EACL,GAAGwB,KADE;AAEL,SAACC,MAAM,CAACY,MAAR,GAAiBZ,MAAM,CAACY,MAAP,IAAiB,SAAjB,GACfb,KAAK,CAACR,SAAN,GAAkB,cAAlB,GAAmCQ,KAAK,CAACd,OAAzC,GAAmD,WADpC,GAEfc,KAAK,CAACZ,WAAN,GAAoB,mBAApB,GAA0CY,KAAK,CAACd,OAAhD,GAA0D;AAJvD,OAAP;;AAOF,SAAKd,MAAL;AAAa;AACX,YAAI6B,MAAM,CAACa,QAAP,IAAmB,QAAvB,EAAiC;AAC/B,cAAIC,cAAc,GAAGP,IAAI,CAACC,KAAL,CAAY5B,KAAK,CAAC,CAAD,EAAK,CAAL,CAAL,GAAgBmB,KAAK,CAACH,UAAtB,GAAoC,GAAhD,CAArB;AACA,iBAAO,EACL,GAAGG,KADE;AAELd,YAAAA,OAAO,EAAE6B,cAFJ;AAGL1B,YAAAA,SAAS,EAAGW,KAAK,CAACX,SAAN,GAAkB0B,cAAlB,GAAmC,CAAnC,GACZf,KAAK,CAACX,SAAN,GAAkB0B,cADN,GAEZ;AALK,WAAP;AAOD;;AACD,YAAId,MAAM,CAACa,QAAP,IAAmB,SAAvB,EAAkC;AAChC,cAAIC,cAAc,GAAGlC,KAAK,CAACmB,KAAK,CAACb,cAAN,CAAqB6B,WAAtB,EAAmChB,KAAK,CAACb,cAAN,CAAqB8B,WAAxD,CAA1B;AACA,iBAAO,EACL,GAAGjB,KADE;AAELd,YAAAA,OAAO,EAAE6B,cAFJ;AAGLrB,YAAAA,QAAQ,EAAGM,KAAK,CAACN,QAAN,GAAiBqB,cAAjB,GAAkC,CAAlC,GACXf,KAAK,CAACN,QAAN,GAAiBqB,cADN,GAEX;AALK,WAAP;AAOD;AACF;;AACD,SAAKrC,SAAL;AACE,aAAO,EACL,GAAGsB,KADE;AAEL,SAACC,MAAM,CAACE,KAAR,GAAiB,CAAC,CAACH,KAAK,CAACC,MAAM,CAACE,KAAR,CAAN,CAAD,GAAyBF,MAAM,CAACiB;AAF5C,OAAP;;AAIF,SAAKvC,SAAL;AACE,aAAO,EACL,GAAGqB,KADE;AAELmB,QAAAA,SAAS,EAAEnB,KAAK,CAACoB,UAAN,GAAsBpB,KAAK,CAACH,UAAN,GAAmB;AAF/C,OAAP;;AAKF,SAAKpB,SAAL;AAAgB;AACd,YAAIwB,MAAM,CAACa,QAAP,IAAmB,QAAvB,EAAiC;AAC/B,cAAIC,cAAc,GAAGP,IAAI,CAACC,KAAL,CAAY5B,KAAK,CAAC,EAAD,EAAM,EAAN,CAAL,GAAkBmB,KAAK,CAACH,UAAxB,GAAsC,GAAlD,CAArB;AACA,iBAAO,EACL,GAAGG,KADE;AAELd,YAAAA,OAAO,EAAE6B,cAFJ;AAGL1B,YAAAA,SAAS,EAAGW,KAAK,CAACX,SAAN,GAAkB0B,cAAlB,GAAmC,CAAnC,GACZf,KAAK,CAACX,SAAN,GAAkB0B,cADN,GAEZ;AALK,WAAP;AAOD;;AACD,YAAId,MAAM,CAACa,QAAP,IAAmB,SAAvB,EAAkC;AAChC,cAAIC,cAAc,GAAGlC,KAAK,CAACmB,KAAK,CAACb,cAAN,CAAqBkC,WAAtB,EAAmCrB,KAAK,CAACb,cAAN,CAAqBmC,WAAxD,CAA1B;AACA,iBAAO,EACL,GAAGtB,KADE;AAELd,YAAAA,OAAO,EAAE6B,cAFJ;AAGLrB,YAAAA,QAAQ,EAAGM,KAAK,CAACN,QAAN,GAAiBqB,cAAjB,GAAkC,CAAlC,GACXf,KAAK,CAACN,QAAN,GAAiBqB,cADN,GAEX;AALK,WAAP;AAOD;AACF;;AAED,SAAK1C,YAAL;AACE,aAAO,EACL,GAAG2B,KADE;AAELjB,QAAAA,KAAK,EAAEiB,KAAK,CAACjB,KAAN,GAAc,CAFhB;AAGLc,QAAAA,UAAU,EAAEG,KAAK,CAACH,UAAN,GAAmB,EAH1B;AAILJ,QAAAA,WAAW,EAAGO,KAAK,CAACP,WAAN,GAAoB,EAJ7B;AAKLE,QAAAA,aAAa,EAAGK,KAAK,CAACP,WAAN,GAAoB,EAL/B;AAMLJ,QAAAA,SAAS,EAAET,YAAY,CAACoB,KAAK,CAACjB,KAAN,GAAc,CAAf,CAAZ,CAA8BsB,KANpC;AAOLO,QAAAA,YAAY,EAAEhC,YAAY,CAACoB,KAAK,CAACjB,KAAN,GAAc,CAAf,CAAZ,CAA8BsB,KAPvC;AAQLf,QAAAA,WAAW,EAAGV,YAAY,CAACoB,KAAK,CAACjB,KAAN,GAAc,CAAf,CAAZ,CAA8BuB,OARvC;AASLC,QAAAA,cAAc,EAAG3B,YAAY,CAACoB,KAAK,CAACjB,KAAN,GAAc,CAAf,CAAZ,CAA8BuB,OAT1C;AAULlB,QAAAA,WAAW,EAAER,YAAY,CAACoB,KAAK,CAACjB,KAAN,GAAc,CAAf,CAAZ,CAA8BqB,IAVtC;AAWLN,QAAAA,aAAa,EAAE,EAXV;AAYLP,QAAAA,cAAc,EAAG,EAZZ;AAaLN,QAAAA,gBAAgB,EAAG;AAbd,OAAP;;AAeF,SAAKf,GAAL;AACE,aAAO,EACL,GAAG8B,KADE;AAELjB,QAAAA,KAAK,EAAG,CAFH;AAGLS,QAAAA,SAAS,EAAC,EAHL;AAILJ,QAAAA,WAAW,EAAER,YAAY,CAAC,CAAD,CAJpB;AAKLI,QAAAA,aAAa,EAAG,KALX;AAMLC,QAAAA,gBAAgB,EAAC,KANZ;AAOL2B,QAAAA,YAAY,EAAE,EAPT;AAQLvB,QAAAA,SAAS,EAAE,GARN;AASLI,QAAAA,WAAW,EAAE,GATR;AAULC,QAAAA,QAAQ,EAAE,GAVL;AAWLa,QAAAA,cAAc,EAAE,GAXX;AAYLjB,QAAAA,WAAW,EAAE,GAZR;AAaLK,QAAAA,aAAa,EAAE,GAbV;AAcLC,QAAAA,UAAU,EAAE;AAdP,OAAP;;AAgBJ;AAAS,aAAOI,KAAP;AAvJX;AAyJD,CA1JD;;AA2JA,eAAeD,OAAf","sourcesContent":["import { SET_GAMER_NAME, BEGIN, END, HEAL, ATTACK, CHANGE_LEVEL, REGAIN_MANA, CHANGE_DISPLAY_ANIMATION, REPORT_BATTLE, FIRE_BALL, LOST_MANA, FIRE_CONE } from '../action'\nimport { monsterArray, round } from '../utils'\n\nconst initialState = {\n  level : 0,\n  beeingPlaying : false,\n  displayAnimation:false,\n  dommage:'',\n  //monster\n  currentMonster : monsterArray[0],\n  monsterName:  '',\n  monsterPv: '',\n  monsterMana:'',\n  messageMonster: '',\n  //player\n  gamerName:'',\n  playerPvMax: 100,\n  playerPv: '',\n  playerManaMax: 100,\n  playerMana: '',\n  lvUpPlayer: 100,\n  messagePlayer: '', \n};\nconst reducer = (state:any = initialState, action:any = {})  => {\n  switch(action.type) {\n    case SET_GAMER_NAME:\n      return {\n        ...state,\n        gamerName : action.value\n      }\n    case BEGIN: \n     return {\n       ...state, \n       beeingPlaying: true,\n       displayAnimation:false,\n       playerPv: state.playerPvMax,\n       playerMana: state.playerManaMax,\n       monsterName: state.currentMonster.name,\n       monsterPv : state.currentMonster.pvMax,\n       monsterMana: state.currentMonster.manaMax,\n     }\n     case CHANGE_DISPLAY_ANIMATION: \n      return {\n        ...state,\n        displayAnimation : !state.displayAnimation\n      }\n     case REGAIN_MANA:\n      return {\n        ...state,\n        monsterMana :state.monsterMana + 5 < state.monsterManaMax ? state.monsterMana + 5 : '',\n        playerMana: state.playerMana + 5 < state.playerManaMax ?  state.playerMana + 5 : state.playerManaMax\n      }\n    case HEAL: {\n       if (action.value == 'player') {\n       return {\n        ...state,\n          playerMana : state.playerMana - 10,\n          playerPv: state.playerPv + Math.floor(15 * ( state.lvUpPlayer) /100) >= state.playerPvMax ?\n          state.playerPvMax: \n          state.playerPv + Math.floor(15 * ( state.lvUpPlayer) /100),\n          messagePlayer: state.playerPv + Math.floor(15 * ( state.lvUpPlayer) /100) >= state.playerPvMax ? \n          'vous avez recuperez' + (state.playerPvMax  - state.playerPv) + 'pv' : \n          'vous avez recuperez' + Math.floor(15 * ( state.lvUpPlayer) /100) + 'pv'\n        }\n     }\n        if (action.value == 'monster') {\n          return {\n            ...state,\n            monsterMana : state.monsterMana - 10,\n            monsterPv: state.monsterPv + state.actualMonster.heal >= state.monsterPvMax ?\n            state.monsterPvMax: \n            state.monsterPv + state.actualMonster.heal,\n            messageMonster: state.monsterPv + state.actualMonster.heal >= state.monsterPvMax ? \n            'le monstre  a recuperer' + (state.monsterPvMax  - state.monsterPv) + 'pv' : \n            'le monstre  a recuperer' + state.actualMonster.heal + 'pv'\n          }\n        }\n      }\n      case  REPORT_BATTLE: \n        return {\n          ...state,\n          [action.forWho]: action.forWho == 'monster' ?\n            state.gamerName + ' a infliger ' + state.dommage + ' de degat' :\n            state.monsterName + ' vous a infliger ' + state.dommage + ' de degat'\n\n        }\n      case ATTACK: {\n        if (action.attacker == \"player\") {\n          let dommageInflige = Math.floor( round(3 , 5) * (state.lvUpPlayer) / 100)\n          return {\n            ...state,\n            dommage: dommageInflige,\n            monsterPv : state.monsterPv - dommageInflige > 0 ? \n            state.monsterPv - dommageInflige :\n            0\n          }\n        }\n        if (action.attacker == \"monster\") {\n          let dommageInflige = round(state.currentMonster.dommage_min, state.currentMonster.dommage_max)\n          return {\n            ...state,\n            dommage: dommageInflige,\n            playerPv : state.playerPv - dommageInflige > 0 ? \n            state.playerPv - dommageInflige :\n            0\n          }\n        }\n      }\n      case LOST_MANA: \n        return {\n          ...state,\n          [action.value] : +[state[action.value]] - action.number\n        }\n      case FIRE_CONE :\n        return {\n          ...state,\n          monsterPV: state.monnsterPV - (  state.lvUpPlayer / 100)\n        }\n      \n      case FIRE_BALL: {\n        if (action.attacker == \"player\") {\n          let dommageInflige = Math.floor( round(10 , 15) * (state.lvUpPlayer) / 100)\n          return {\n            ...state,\n            dommage: dommageInflige,\n            monsterPv : state.monsterPv - dommageInflige > 0 ? \n            state.monsterPv - dommageInflige :\n            0\n          }\n        }\n        if (action.attacker == \"monster\") {\n          let dommageInflige = round(state.currentMonster.special_min, state.currentMonster.special_max)\n          return {\n            ...state,\n            dommage: dommageInflige,\n            playerPv : state.playerPv - dommageInflige > 0 ? \n            state.playerPv - dommageInflige :\n            0\n          }\n        }\n      }\n\n      case CHANGE_LEVEL: \n        return {\n          ...state,\n          level: state.level + 1,\n          lvUpPlayer: state.lvUpPlayer + 20,\n          playerPvMax : state.playerPvMax + 20,\n          playerManaMax : state.playerPvMax + 20,\n          monsterPv: monsterArray[state.level + 1].pvMax,\n          monsterPvMax: monsterArray[state.level + 1].pvMax,\n          monsterMana : monsterArray[state.level + 1].manaMax,\n          monsterManaMax : monsterArray[state.level + 1].manaMax,\n          monsterName: monsterArray[state.level + 1].name,\n          messagePlayer: '',\n          messageMonster : '', \n          displayAnimation : false\n        }\n      case END :\n        return {\n          ...state,\n          level : 0,\n          gamerName:'',\n          monsterName: monsterArray[0],\n          beeingPlaying : false,\n          displayAnimation:false,\n          monsterPvMax: '',\n          monsterPv: 100, \n          playerPvMax: 100,\n          playerPv: 100,\n          monsterManaMax: 100,\n          monsterMana: 100, \n          playerManaMax: 100,\n          playerMana: 100, \n       }\n    default: return state\n  }\n}\nexport default reducer"]},"metadata":{},"sourceType":"module"}