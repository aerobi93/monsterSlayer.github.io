{"ast":null,"code":"import { connect } from \"react-redux\";\nimport Button from \"../../componants/buttons\";\nimport { begin, heal, changeDiplayAnimation } from '../../action';\n\nconst moving = function (elementToMove, intervalSecond, nameAction, touch) {\n  let start = Date.now();\n  let timer = setInterval(function () {\n    let timePassed = Date.now() - start;\n\n    if (timePassed >= intervalSecond) {\n      clearInterval(timer);\n      setTimeout(() => {\n        elementToMove.style.left = 'inherit';\n        elementToMove.style.right = 'inherit';\n        touch.style.backgroundColor = 'red';\n        setTimeout(() => {\n          touch.style.backgroundColor = 'inherit';\n        }, 50);\n      }, 50);\n    }\n\n    draw(timePassed, elementToMove, nameAction, touch);\n  }, 20);\n};\n\nfunction draw(timePassed, elementToMove, nameAction, touch) {\n  if (nameAction == 'playerAttack') {\n    elementToMove.style.left = timePassed / 5 + 'px';\n  } else if (nameAction = 'monsterAttack') {\n    elementToMove.style.right = timePassed / 5 + 'px';\n  }\n}\n\nconst mapStateToProps = state => ({\n  displayAnimation: state.displayAnimation\n});\n\nconst mapStateToDispatch = dispatch => ({\n  buttonAction: value => {\n    if (value == 'begin' || value == 'giveUp') {\n      let display = value == 'begin' ? true : false;\n      dispatch(begin(display));\n    } else if (value == 'heal') {\n      dispatch(heal());\n    } else if (value == 'attack' || value == 'specialAttack') {\n      let playerPicture = document.getElementById('player');\n      let monsterPicture = document.getElementById('monster');\n      dispatch(changeDiplayAnimation());\n      moving(playerPicture, 1000 * 1.5, 'playerAttack', monsterPicture);\n      setTimeout(() => {\n        moving(monsterPicture, 1000 * 1.5, 'monsterAttack', playerPicture);\n      }, 1000 * 1.5);\n      setTimeout(() => {\n        dispatch(changeDiplayAnimation());\n      }, 1000 * 3);\n    }\n  }\n});\n\nexport default connect(mapStateToProps, mapStateToDispatch)(Button);","map":{"version":3,"sources":["/home/rom/Desktop/reactBulder/my-app/src/container/button/index.tsx"],"names":["connect","Button","begin","heal","changeDiplayAnimation","moving","elementToMove","intervalSecond","nameAction","touch","start","Date","now","timer","setInterval","timePassed","clearInterval","setTimeout","style","left","right","backgroundColor","draw","mapStateToProps","state","displayAnimation","mapStateToDispatch","dispatch","buttonAction","value","display","playerPicture","document","getElementById","monsterPicture"],"mappings":"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","sourcesContent":["import { connect } from \"react-redux\";\nimport Button from \"../../componants/buttons\";\nimport { begin, heal, attack, changeDiplayAnimation } from '../../action';\nimport {round} from '../../utils'\n\nconst  moving = function  (elementToMove: HTMLElement, intervalSecond: number, nameAction:string, touch:HTMLElement) {\n  let start = Date.now();\n  let timer = setInterval(function() {\n  let timePassed = Date.now() - start;\n  if (timePassed >= intervalSecond) {\n    clearInterval(timer);\n    setTimeout(() => {\n      elementToMove.style.left ='inherit'\n      elementToMove.style.right ='inherit'\n      touch.style.backgroundColor= 'red'\n      setTimeout(() => {\n        touch.style.backgroundColor= 'inherit'\n      }, 50)\n    }, 50);}\n    draw(timePassed, elementToMove, nameAction, touch);\n    }, 20);\n  }\n\n    function draw(timePassed:number, elementToMove:HTMLElement, nameAction:string, touch: HTMLElement) {\n    if ( nameAction == 'playerAttack') {\n      elementToMove.style.left = timePassed / 5 + 'px'\n    }\n    else if (nameAction = 'monsterAttack') {\n      elementToMove.style.right = timePassed / 5 + 'px'\n    }\n  }\n\nconst mapStateToProps=(state:any) => ({\n  displayAnimation: state.displayAnimation\n})\nconst mapStateToDispatch = (dispatch:any) => ({\n  buttonAction: (value:any) => {\n      if (value == 'begin' || value== 'giveUp' ) {\n          let display =  value == 'begin' ? true : false\n          dispatch(begin(display))\n      }\n      else if (value == 'heal'){\n          dispatch(heal())\n      }\n      else if (value == 'attack' || value == 'specialAttack') {\n          let playerPicture:HTMLElement | null = document.getElementById('player')\n          let monsterPicture:HTMLElement | null = document.getElementById('monster')\n          dispatch(changeDiplayAnimation())\n          moving(playerPicture!, 1000 * 1.5, 'playerAttack', monsterPicture!)\n\n          setTimeout(() => {\n              moving(monsterPicture!, 1000 * 1.5, 'monsterAttack', playerPicture! )\n          }, 1000 *1.5);\n\n          setTimeout(() => {\n              dispatch(changeDiplayAnimation())\n          }, 1000 * 3);\n      }   \n  }})\n\nexport default connect(mapStateToProps, mapStateToDispatch) (Button)"]},"metadata":{},"sourceType":"module"}