{"ast":null,"code":"import { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Button from \"../../componants/buttons\";\nimport { begin, heal, attack, changeDiplayAnimation } from '../../action';\nimport { moving, round } from '../../utils';\n\nconst mapStateToProps = state => ({\n  displayAnimation: state.displayAnimation\n});\n\nconst mapStateToDispatch = dispatch => {\n  var _s = $RefreshSig$();\n\n  return {\n    buttonAction: _s(value => {\n      _s();\n\n      let playerPicture = document.getElementById('player');\n      let monsterPicture = document.getElementById('monster');\n\n      if (value == 'begin' || value == 'giveUp') {\n        let display = value == 'begin' ? true : false;\n        dispatch(begin(display));\n      } else if (value == 'heal') {\n        dispatch(heal());\n        moving(monsterPicture, 1000 * 0.75, 'monsterAttack', playerPicture);\n        setTimeout(() => {\n          dispatch(attack(round(3, 10), 'playerPv', 'messageDommagePlayer'));\n        }, 1000 * 0.75);\n      } else if (value == 'attack' || value == 'specialAttack') {\n        let dommage = value == 'attack' ? round(3, 10) : round(10, 15);\n        dispatch(changeDiplayAnimation());\n        moving(playerPicture, 1000 * 0.75, 'playerAttack', monsterPicture);\n        setTimeout(() => {\n          moving(monsterPicture, 1000 * 0.75, 'monsterAttack', playerPicture);\n          dispatch(attack(dommage, 'monsterPv', 'messageDommageMonster'));\n        }, 1000 * 0.75);\n        console.log('test', useState());\n        setTimeout(() => {\n          dispatch(changeDiplayAnimation());\n          dispatch(attack(round(3, 10), 'playerPv', 'messageDommagePlayer'));\n        }, 1000 * 1.5);\n      }\n    }, \"VhlnxxH3xh7Qs17KADUJ8wvRSZs=\")\n  };\n};\n\nexport default connect(mapStateToProps, mapStateToDispatch)(Button);","map":{"version":3,"sources":["/home/rom/Desktop/reactBulder/my-app/src/container/button/index.tsx"],"names":["useState","connect","Button","begin","heal","attack","changeDiplayAnimation","moving","round","mapStateToProps","state","displayAnimation","mapStateToDispatch","dispatch","buttonAction","value","playerPicture","document","getElementById","monsterPicture","display","setTimeout","dommage","console","log"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,MAAtB,EAA8BC,qBAA9B,QAA2D,cAA3D;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,aAA9B;;AAGA,MAAMC,eAAe,GAAEC,KAAD,KAAgB;AACpCC,EAAAA,gBAAgB,EAAED,KAAK,CAACC;AADY,CAAhB,CAAtB;;AAGA,MAAMC,kBAAkB,GAAIC,QAAD;AAAA;;AAAA,SAAmB;AAC5CC,IAAAA,YAAY,KAAGC,KAAD,IAAe;AAAA;;AAC3B,UAAIC,aAAgC,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAvC;AACA,UAAIC,cAAiC,GAAGF,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAxC;;AACE,UAAIH,KAAK,IAAI,OAAT,IAAoBA,KAAK,IAAG,QAAhC,EAA2C;AACvC,YAAIK,OAAO,GAAIL,KAAK,IAAI,OAAT,GAAmB,IAAnB,GAA0B,KAAzC;AACAF,QAAAA,QAAQ,CAACV,KAAK,CAACiB,OAAD,CAAN,CAAR;AACH,OAHD,MAIK,IAAIL,KAAK,IAAI,MAAb,EAAoB;AACrBF,QAAAA,QAAQ,CAACT,IAAI,EAAL,CAAR;AACAG,QAAAA,MAAM,CAACY,cAAD,EAAkB,OAAO,IAAzB,EAA+B,eAA/B,EAAgDH,aAAhD,CAAN;AACAK,QAAAA,UAAU,CAAC,MAAK;AACdR,UAAAA,QAAQ,CAACR,MAAM,CAACG,KAAK,CAAC,CAAD,EAAI,EAAJ,CAAN,EAAe,UAAf,EAA2B,sBAA3B,CAAP,CAAR;AACD,SAFS,EAEP,OAAO,IAFA,CAAV;AAIH,OAPI,MAQA,IAAIO,KAAK,IAAI,QAAT,IAAqBA,KAAK,IAAI,eAAlC,EAAmD;AACpD,YAAIO,OAAO,GAAGP,KAAK,IAAG,QAAR,GAAmBP,KAAK,CAAC,CAAD,EAAG,EAAH,CAAxB,GAAiCA,KAAK,CAAC,EAAD,EAAK,EAAL,CAApD;AACAK,QAAAA,QAAQ,CAACP,qBAAqB,EAAtB,CAAR;AACAC,QAAAA,MAAM,CAACS,aAAD,EAAiB,OAAO,IAAxB,EAA8B,cAA9B,EAA8CG,cAA9C,CAAN;AACAE,QAAAA,UAAU,CAAC,MAAM;AACfd,UAAAA,MAAM,CAACY,cAAD,EAAkB,OAAO,IAAzB,EAA+B,eAA/B,EAAgDH,aAAhD,CAAN;AACAH,UAAAA,QAAQ,CAACR,MAAM,CAACiB,OAAD,EAAU,WAAV,EAAuB,uBAAvB,CAAP,CAAR;AACD,SAHS,EAGP,OAAO,IAHA,CAAV;AAIAC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBxB,QAAQ,EAA5B;AACAqB,QAAAA,UAAU,CAAC,MAAM;AACbR,UAAAA,QAAQ,CAACP,qBAAqB,EAAtB,CAAR;AACAO,UAAAA,QAAQ,CAACR,MAAM,CAACG,KAAK,CAAC,CAAD,EAAI,EAAJ,CAAN,EAAe,UAAf,EAA2B,sBAA3B,CAAP,CAAR;AACH,SAHS,EAGP,OAAO,GAHA,CAAV;AAIH;AACJ,KA7BW;AADgC,GAAnB;AAAA,CAA3B;;AAgCA,eAAeP,OAAO,CAACQ,eAAD,EAAkBG,kBAAlB,CAAP,CAA8CV,MAA9C,CAAf","sourcesContent":["import { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Button from \"../../componants/buttons\";\nimport { begin, heal, attack, changeDiplayAnimation } from '../../action';\nimport { moving, round } from '../../utils'\n\n\nconst mapStateToProps=(state:any) => ({\n  displayAnimation: state.displayAnimation\n})\nconst mapStateToDispatch = (dispatch:any) => ({\n  buttonAction: (value:any) => {\n    let playerPicture:HTMLElement | null = document.getElementById('player')\n    let monsterPicture:HTMLElement | null = document.getElementById('monster')\n      if (value == 'begin' || value== 'giveUp' ) {\n          let display =  value == 'begin' ? true : false\n          dispatch(begin(display))\n      }\n      else if (value == 'heal'){\n          dispatch(heal())\n          moving(monsterPicture!, 1000 * 0.75, 'monsterAttack', playerPicture!)\n          setTimeout(()=> {\n            dispatch(attack(round(3, 10), 'playerPv', 'messageDommagePlayer'))\n          }, 1000 * 0.75)\n         \n      }\n      else if (value == 'attack' || value == 'specialAttack') {\n          let dommage = value== 'attack' ? round(3,10) : round(10, 15)\n          dispatch(changeDiplayAnimation())\n          moving(playerPicture!, 1000 * 0.75, 'playerAttack', monsterPicture!) \n          setTimeout(() => {\n            moving(monsterPicture!, 1000 * 0.75, 'monsterAttack', playerPicture!)\n            dispatch(attack(dommage, 'monsterPv', 'messageDommageMonster'))\n          }, 1000 * 0.75);\n          console.log('test', useState())\n          setTimeout(() => {\n              dispatch(changeDiplayAnimation())\n              dispatch(attack(round(3, 10), 'playerPv', 'messageDommagePlayer'))\n          }, 1000 * 1.5);\n      }   \n  }})\n\nexport default connect(mapStateToProps, mapStateToDispatch) (Button)"]},"metadata":{},"sourceType":"module"}